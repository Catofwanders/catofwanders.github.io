{"version":3,"sources":["components/Tetris/styled.Tetris.js","components/Display/styled.Display.js","components/Display/index.js","components/StartButton/styled.StartButton.js","components/StartButton/index.js","components/Cell/styled.Cell.js","utils/tetrominos.js","components/Cell/index.js","components/Stage/styled.Stage.js","components/Stage/index.js","utils/helpers.js","hooks/useStage.js","hooks/useGameStatus.js","components/Tetris/index.js","hooks/usePlayer.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["StyledTetrisWrapper","styled","div","StyledTetris","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledCell","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","memo","StyledStage","height","width","Stage","stage","map","row","cell","x","key","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","pos","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","updatePlayerPos","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","clearGameStatus","movePlayer","drop","console","log","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2cb9138d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  min-height: 30px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  border-radius: 20px;\r\n  color: ${({ gameOver }) => (gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-size: 0.7rem;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./styled.Display\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-size: 0.7rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styled.StartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={() => callback()}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${({ color }) => color}, 0.8);\r\n  border: ${({ type }) => (type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${({ color }) => color}, 0.1);\r\n  border-right-color: rgba(${({ color }) => color}, 1);\r\n  border-top-color: rgba(${({ color }) => color}, 1);\r\n  border-left-color: rgba(${({ color }) => color}, 0.3);\r\n`;\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0, 0, 0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80, 227, 230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"36, 95, 223\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"223, 173, 36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"223, 217, 36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48, 211, 56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n    ],\r\n    color: \"132, 61, 198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227, 78, 78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { StyledCell } from \"./styled.Cell\";\r\nimport { TETROMINOS } from \"../../utils/tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type]?.color} />\r\n);\r\n\r\nexport default memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${({ height }) => height},\r\n    calc(25vw / ${({ width }) => width})\r\n  );\r\n  grid-template-columns: repeat(${({ width }) => width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell\";\r\nimport { StyledStage } from \"./styled.Stage\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      // console.log(stage[y + player.pos.y + moveY][x + player.pos.x + moveX]);\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../utils/helpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((acc, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return acc;\r\n        }\r\n        acc.push(row);\r\n        return acc;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage((prev) => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is original Tetris score is calculated\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  const clearGameStatus = () => {\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  return [score, rows, level, clearGameStatus, setLevel];\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styled.Tetris\";\r\n\r\n// Components\r\nimport Display from \"../Display\";\r\nimport StartButton from \"../StartButton\";\r\nimport Stage from \"../Stage\";\r\n\r\n//Custom hooks\r\nimport { useStage } from \"../../hooks/useStage\";\r\nimport { usePlayer } from \"../../hooks/usePlayer\";\r\nimport { createStage, checkCollision } from \"../../utils/helpers\";\r\nimport { useInterval } from \"../../hooks/useInterval\";\r\nimport { useGameStatus } from \"../../hooks/useGameStatus\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, rows, level, clearGameStatus, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = (dir) => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    clearGameStatus();\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={(e) => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from \"react\";\r\nimport { randomTetromino, TETROMINOS } from \"../utils/tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../utils/helpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = useCallback(\r\n    ({ x, y, collided }) => {\r\n      setPlayer((prev) => ({\r\n        ...prev,\r\n        pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n        collided,\r\n      }));\r\n    },\r\n    [setPlayer]\r\n  );\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, [setPlayer]);\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => {\n  return <Tetris />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}