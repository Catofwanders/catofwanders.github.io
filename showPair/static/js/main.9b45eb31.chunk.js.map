{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","cards","setCards","prevClick","setPrevClick","counter","setCounter","gameLogic","id","current","map","card","data","position","data_pair","matched","active","setActiveHandler","useEffect","cards_json","Array","keys","index","createCards","setInterval","console","log","className","key","onClick","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g1BAoHeA,MAjHf,WAAgB,IAAD,EAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIqBF,mBAAS,MAJ9B,mBAING,EAJM,KAIKC,EAJL,OAKiBJ,mBAAS,GAL1B,mBAKNK,EALM,KAKGC,EALH,KAsEb,SAASC,EAAUC,GACdH,GAAW,GACZC,EAAW,GACXF,EAAa,OAEbE,EAAWD,EAAU,GA5DzB,SAA0BG,GAExB,GAAGH,GAAW,EAAE,CACd,IAAMI,EAAUR,EAAMS,KAAI,SAAAC,GACxB,IAAIC,EAAO,CACTJ,GAAIG,EAAKH,GACTK,SAAUF,EAAKE,SACfC,UAAWH,EAAKG,WAGlB,IAAoB,IAAjBH,EAAKI,QAAiB,CACvB,GAAGJ,EAAKH,KAAOA,EAKb,OAHe,IAAZH,GACDD,EAAaO,EAAKH,IAEb,EAAP,GACKI,EADL,CAEEI,QAAQ,EACRD,QAAuB,OAAdZ,GAAsBA,IAAcQ,EAAKG,YAGhD,GAAGX,IAAcQ,EAAKH,IAAMG,EAAKG,YAAcN,EACnD,OAAO,EAAP,GACKI,EADL,CAEEI,QAAQ,EACRD,SAAS,IAIf,OAAOJ,KAETT,EAASO,IA8BXQ,CAAiBT,GAkBnB,OAxFAU,qBAAU,YAwEV,WACE,IAAMC,EAAa,GACV,YAAOC,MAAM,IAAIC,QACtBX,KAAI,SAACC,EAAMW,GAEb,OAAOH,EADQG,GACe,CAC5Bd,GAAIc,EAAQ,EACZT,SAAUS,EAAQ,EAClBR,UAAWQ,EAAO,IAAM,EAAIA,EAAQ,EAAIA,EACxCN,QAAQ,EACRD,SAAS,MAGbb,EAASiB,GApFTI,GACAC,aAAY,WACVC,QAAQC,IAAIzB,KAEX,OACF,IAmFD,yBAAK0B,UAAU,OACb,yBAAKA,UAAU,aACb1B,EAAMS,KAAI,gBAAEF,EAAF,EAAEA,GAAIK,EAAN,EAAMA,SAAUC,EAAhB,EAAgBA,UAAWE,EAA3B,EAA2BA,OAAQD,EAAnC,EAAmCA,QAAnC,OACR,yBAAKa,IAAKpB,EAAImB,UAAU,kBAAkBE,QAAS,kBAAItB,EAAUC,KAC/D,kCAAQA,GACR,wCAAcK,GACd,oCAAUC,GACV,sCAAYE,EAAOc,YACnB,uCAAaf,EAAQe,mBC/FbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9b45eb31.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nfunction App() {\n\n\n  const [cards, setCards] = useState([]);\n  const [prevClick, setPrevClick] = useState(null);\n  const [counter, setCounter] = useState(1);\n\n  useEffect(()=>{\n    createCards();\n    setInterval(() => {\n      console.log(cards);\n      // clearActive();\n    }, 1000);\n  }, []);\n\n  function setActiveHandler(id) {\n    // Если кликнули меньше чем по двум карточкам\n    if(counter <= 2){\n      const current = cards.map(card => {\n        let data = {\n          id: card.id,\n          position: card.position,\n          data_pair: card.data_pair,\n        }\n        // Находим карточку по которой кликнули\n        if(card.matched !== true){\n          if(card.id === id){\n            // Если это первый клик запоминаем id карточки по которой кликнули\n            if(counter === 1){\n              setPrevClick(card.id);\n            }\n            return {\n              ...data,\n              active: true,\n              matched: prevClick !== null && prevClick === card.data_pair ? true : false\n            }\n          // Если это не первый клик  и data_pair равно текущему id ставим предыдущей карточке статус matched \n          }else if(prevClick === card.id && card.data_pair === id){\n            return {\n              ...data,\n              active: true,\n              matched: true\n            }\n          }\n        }\n        return card;\n      });\n      setCards(current);\n    }\n  }\n\n  function clearActive() {\n    const current = cards.map(card => {\n      let data = {\n        id: card.id,\n        position: card.position,\n        data_pair: card.data_pair,\n        active: false,\n        matched: false\n      }\n      if(card.matched !== true){\n        return {\n          ...data,\n        }\n      }\n      return card;\n    });\n    setCards(current);\n  }\n\n  function gameLogic(id){\n    if(counter >= 2) {\n      setCounter(1);\n      setPrevClick(null);\n    }else {\n      setCounter(counter + 1);\n    }\n    setActiveHandler(id);\n  }\n  function createCards() {\n    const cards_json = [];\n    const arr = [...Array(16).keys()];\n    arr.map((card, index) => {\n      let cardname = index;\n      return cards_json[cardname] = {\n        id: index + 1,\n        position: index + 1,\n        data_pair: index %2 === 0 ? index + 2 : index,\n        active: false,\n        matched: false\n      };\n    });\n    setCards(cards_json);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"gameTable\">\n       {cards.map(({id, position, data_pair, active, matched})=>(\n          <div key={id} className=\"gameTable__card\" onClick={()=>gameLogic(id)}>\n            <p>id: {id}</p>\n            <p>position: {position}</p>\n            <p>pair: {data_pair}</p>\n            <p>active: {active.toString()}</p>\n            <p>matched: {matched.toString()}</p>\n          </div>\n        ))}\n        {/* {console.log({firstClicked, clickCount})} */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}