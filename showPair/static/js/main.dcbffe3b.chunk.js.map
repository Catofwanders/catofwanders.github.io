{
  "version": 3,
  "sources": [
    "assets/img/card-back.jpg",
    "serviceWorker.js",
    "components/globalStyle.js",
    "components/BattleField/styled.BattleField.js",
    "helpers/lists.js",
    "helpers/index.js",
    "components/Card/styled.Card.js",
    "components/Card/index.js",
    "components/BattleField/BattleCards.js",
    "components/BattleField/index.js",
    "components/NavBar/index.js",
    "container/BattleField/index.js",
    "hooks/imageHooks.js",
    "container/App/index.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ContentContainer",
    "styled",
    "div",
    "BattleFieldWrap",
    "SIZES_LIST",
    "2",
    "6",
    "8",
    "10",
    "12",
    "15",
    "18",
    "21",
    "setStateValue",
    "state",
    "key",
    "value",
    "concatArray",
    "arr",
    "concat",
    "generateCardsData",
    "size",
    "images",
    "pairs",
    "start",
    "i",
    "push",
    "id",
    "image",
    "generatePairs",
    "pairsArray",
    "shuffledArray",
    "sort",
    "Math",
    "random",
    "CardWrap",
    "width",
    "CardBack",
    "Card",
    "pair",
    "index",
    "сlick",
    "isActive",
    "some",
    "item",
    "isSame",
    "previousValue",
    "className",
    "onClick",
    "webformatURL",
    "BattleCards",
    "initialValues",
    "setFinish",
    "useState",
    "isStart",
    "setIsStart",
    "setState",
    "useEffect",
    "setPairs",
    "map",
    "prev",
    "clearTimeoutRef",
    "setTimeout",
    "clearTimeout",
    "length",
    "cardClickHandler",
    "useCallback",
    "find",
    "arrItem",
    "prop",
    "isValueInArray",
    "same",
    "BattleWrap",
    "finish",
    "NavWrap",
    "NavBar",
    "setSize",
    "onChange",
    "e",
    "Number",
    "target",
    "Object",
    "keys",
    "BattleField",
    "url",
    "initialValue",
    "data",
    "setData",
    "loading",
    "setLoading",
    "a",
    "axios",
    "get",
    "response",
    "status",
    "fetchData",
    "useFetch",
    "cardData",
    "hits",
    "content",
    "App",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error",
    "console",
    "message"
  ],
  "mappings": "wFAAAA,EAAOC,QAAU,IAA0B,uC,2ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,sKCf5B,IAAMC,EAAmBC,IAAOC,IAAV,K,uNCAtB,IAAMC,EAAkBF,IAAOC,IAAV,K,cCFfE,EAAa,CACxBC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,GAAI,GACJC,GAAI,IAAM,EACVC,GAAI,IAAM,EACVC,GAAI,IAAM,EACVC,GAAI,IAAM,G,OCOCC,EAAgB,SAACC,EAAOC,EAAKC,GACxC,OAAO,eAAKF,EAAZ,eAAoBC,EAAMC,KAOfC,EAAc,SAACC,GAAS,IAAD,EAClC,OAAO,MAAGC,OAAH,oBAAaD,KAsBTE,EAAoB,SAACC,EAAMC,GACtC,IAAMC,EApBc,SAACF,EAAMC,GAG3B,IAFA,IAAMJ,EAAM,GACRM,EAAQ,EACHC,EAAI,EAAGA,GAAKJ,EAAMI,IACzBP,EAAIQ,KAAK,CACP,CACEC,GAAIH,EACJI,MAAON,EAAOG,EAAI,IAEpB,CACEE,GAAIH,EAAQ,EACZI,MAAON,EAAOG,EAAI,MAGtBD,GAAS,EAEX,OAAON,EAIOW,CAAcR,EAAO,EAAGC,GAChCQ,EAAab,EAAYM,GAG/B,MAAO,CAAEA,QAAOQ,cAFmBD,EA7BxBE,MAAK,kBAAMC,KAAKC,SAAW,Q,+uBCjBjC,IAAMC,EAAWlC,IAAOC,IAAV,KAEV,gBAAGkC,EAAH,EAAGA,MAAH,MAAe,eAAQA,EAAR,cAA2B,KACrC,gBAAGA,EAAH,EAAGA,MAAH,MAAe,eAAQA,EAAR,gBAAqBA,EAArB,SAAmC,IAqB5CC,KAMI,gBAAGT,EAAH,EAAGA,MAAH,oBAAsBA,EAAtB,QC5BX,SAASU,EAAT,GAAsD,IFMrCC,EAAMvB,EENPwB,EAAqC,EAArCA,MAAOJ,EAA8B,EAA9BA,MAAOK,EAAuB,EAAvBA,WAAO3B,EAAgB,EAAhBA,MAAOc,EAAS,EAATA,MACnDc,GFKwBH,EELGzB,EAAMS,MFKHP,EELUwB,EFMvCD,EAAKI,MAAK,SAACC,GAAD,OAAUA,IAAS5B,MEL9B6B,EAAS/B,EAAMgC,gBAAkBN,EACvC,OACE,kBAACL,EAAD,CACEY,WAAYF,GAAUH,IAAa,SACnCN,MAAOA,EACPY,QAAS,kBAAMP,EAAMD,IACrBZ,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOqB,eCPpB,IAsDeC,EAtDK,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,cAAe5B,EAA4C,EAA5CA,MAAOQ,EAAqC,EAArCA,cAAeV,EAAsB,EAAtBA,KAAM+B,EAAgB,EAAhBA,UAAgB,EAClDC,oBAAS,GADyC,mBACzEC,EADyE,KAChEC,EADgE,OAEtDF,mBAASF,GAF6C,mBAEzErC,EAFyE,KAElE0C,EAFkE,KAIhFC,qBAAU,WACR,GAAIH,EAAS,CACX,IAAMI,EAAWzC,EAAYM,GAAOoC,KAAI,SAACf,GAAD,OAAUA,EAAKjB,MACvD6B,GAAS,SAACI,GAAD,OAAU/C,EAAc+C,EAAM,QAASF,MAChD,IAAMG,EAAkBC,YAAW,WACjCN,GAAS,SAACI,GAAD,OAAU/C,EAAc+C,EAAM,QAAS,OAChDL,GAAW,KACV,KAEH,OAAO,WACLQ,aAAaF,OAGhB,CAACP,EAAS/B,IAEbkC,qBAAU,WACJ3C,EAAMS,MAAMyC,SAAkB,EAAP3C,GAAaiC,GACtCF,GAAU,KAEX,CAACtC,EAAOO,EAAM+B,EAAWE,IAE5B,IAAMW,EAAmBC,uBACvB,SAACvC,GACC,IHjCkBiB,EGiCZL,GHjCYK,EGiCGjB,EAAIJ,EHhClB4C,MAAK,SAACC,GACf,OAAOA,EAAQD,MAAK,SAACE,GACnB,OAAOA,EAAK1C,KAAOiB,SG+Bf9B,EAAMgC,eACRU,GAAS,SAACI,GAAD,OAAU/C,EAAc+C,EAAM,gBAAiB,SH3BlC,SAACrB,EAAMvB,GACnC,OAAOuB,EAAKI,MAAK,SAACC,GAAD,OAAUA,EAAKjB,KAAOX,KG2B7BsD,CAAe/B,EAAMzB,EAAMgC,gBAC7BU,GAAS,SAACI,GAAD,OAAU/C,EAAc+C,EAAM,QAAP,sBAAoBA,EAAKrC,OAAzB,CAAgCT,EAAMgC,cAAenB,SAGvF6B,GAAS,SAACI,GACR,OAAO,eAAKA,EAAZ,CAAkBd,cAAenB,EAAI4C,KAAMhC,SAIjD,CAAChB,EAAOT,IAGV,OAAOiB,EAAc4B,KAAI,gBAAGhC,EAAH,EAAGA,GAAH,IAAOC,aAAP,MAAe,GAAf,SACvB,kBAACU,EAAD,CAAMxB,MAAOA,EAAO2B,aAAOwB,EAAkBlD,IAAKY,EAAIa,MAAOb,EAAIS,MAAOhC,EAAWiB,GAAOO,MAAOA,QC5C/FuB,EAAgB,CACpBoB,KAAM,GACNzB,cAAe,KACfvB,MAAO,IAqBMiD,EAlBI,SAAC,GAAsB,IAApBnD,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAAa,EACX+B,oBAAS,GADE,mBAChCoB,EADgC,KACxBrB,EADwB,KAGvC,OACE,oCACE,kBAACjD,EAAD,KACGmB,GAAU,kBAAC,EAAD,eAAa6B,cAAeA,EAAeC,UAAWA,EAAW/B,KAAMA,GAAUC,IAC3FmD,GAAU,yC,sLCbnB,IAAMC,EAAUzE,IAAOC,IAAV,KA6BEyE,EApBA,SAAC,GAAuB,IAArBtD,EAAoB,EAApBA,KAAMuD,EAAc,EAAdA,QACtB,OACE,kBAACF,EAAD,KACE,kDACA,4BAAQ1D,MAAOK,EAAMwD,SAAU,SAACC,GAAD,OAAOF,EAAQG,OAAOD,EAAEE,OAAOhE,UAC3DiE,OAAOC,KAAK9E,GAAYuD,KAAI,SAACf,GAAD,OAC3B,4BAAQ7B,IAAG,iBAAY6B,GAAQ5B,MAAO4B,GACnCA,EADH,gBCIKuC,EAlBK,WAAO,IAAD,EACA9B,mBAAS,GADT,mBACjBhC,EADiB,KACXuD,EADW,OCHF,SAACQ,EAAKC,GAAkB,IAAD,EACrBhC,mBAASgC,GADY,mBACtCC,EADsC,KAChCC,EADgC,OAEflC,oBAAS,GAFM,mBAEtCmC,EAFsC,KAE7BC,EAF6B,KAiB7C,OAdAhC,qBAAU,YACO,uCAAG,4BAAAiC,EAAA,sEAEdD,GAAW,GAFG,SAGSE,IAAMC,IAAIR,GAHnB,OAIU,OADlBS,EAHQ,QAIDC,QACXP,EAAQM,EAASP,MALL,uBAQdG,GAAW,GARG,uEAAH,qDAWfM,KACC,CAACX,IACG,CAAEI,UAASF,QDZQU,CAAS,uGAAD,OAE9B3E,EAAO,EAAI,EAAIA,GAEjB,MAJMmE,EAFgB,EAEhBA,QAASF,EAFO,EAEPA,KAMXW,GAAYT,GAAWF,GAAQlE,EAAyB,EAAPC,EAAD,OAAWiE,QAAX,IAAWA,OAAX,EAAWA,EAAMY,MACjEC,GAAWX,GAAWF,EAAO,kBAAC,EAAD,CAAYjE,KAAMA,EAAMC,OAAQ2E,IAAe,sCAClF,OACE,oCACE,kBAAC,EAAD,CAAQ5E,KAAMA,EAAMuD,QAASA,IAC5BuB,IEPQC,MARf,WACE,OACE,kBAACpG,EAAD,KACE,kBAAC,EAAD,QCDNqG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SbkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c",
  "file": "static/js/main.dcbffe3b.chunk.js",
  "sourcesContent": [
    "module.exports = \"static/media/card-back.a06220d0.jpg\";",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import styled from 'styled-components';\n\nexport const ContentContainer = styled.div`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n",
    "import styled from 'styled-components';\n\nexport const BattleFieldWrap = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: stretch;\n  flex-wrap: wrap;\n`;\n",
    "export const SIZES_LIST = {\n  2: 100 / 2,\n  6: 100 / 4,\n  8: 100 / 4,\n  10: 100 / 5,\n  12: 100 / 6,\n  15: 100 / 6,\n  18: 100 / 6,\n  21: 100 / 7,\n};\n",
    "export const getPair = (item, arr) => {\n  return arr.find((arrItem) => {\n    return arrItem.find((prop) => {\n      return prop.id === item;\n    });\n  });\n};\n\nexport const isValueInArray = (pair, value) => {\n  return pair.some((item) => item.id === value);\n};\nexport const isValueInArray2 = (pair, value) => {\n  return pair.some((item) => item === value);\n};\n\nexport const setStateValue = (state, key, value) => {\n  return { ...state, [key]: value };\n};\n\nexport const shuffleArray = (arr) => {\n  return arr.sort(() => Math.random() - 0.5);\n};\n\nexport const concatArray = (arr) => {\n  return [].concat(...arr);\n};\n\nconst generatePairs = (size, images) => {\n  const arr = [];\n  let start = 1;\n  for (let i = 1; i <= size; i++) {\n    arr.push([\n      {\n        id: start,\n        image: images[i - 1],\n      },\n      {\n        id: start + 1,\n        image: images[i - 1],\n      },\n    ]);\n    start += 2;\n  }\n  return arr;\n};\n\nexport const generateCardsData = (size, images) => {\n  const pairs = generatePairs(size / 2, images);\n  const pairsArray = concatArray(pairs);\n  const shuffledArray = shuffleArray(pairsArray);\n\n  return { pairs, shuffledArray };\n};\n",
    "import styled from 'styled-components';\nimport CardBack from '../../assets/img/card-back.jpg';\n\nexport const CardWrap = styled.div`\n  position: relative;\n  width: ${({ width }) => `calc(${width}% - 2px)` || '100%'};\n  min-height: ${({ width }) => `calc(${width}vh - ${width}px)` || '100%px'};\n  border: 5px solid #1b161d;\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  margin: 1px;\n  > * {\n    position: relative;\n    z-index: 1;\n  }\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    transform: rotateY(0);\n    transition: 0.5s;\n    background: url(${CardBack}) no-repeat center/cover;\n  }\n  &.active {\n    pointer-events: none;\n    &:after {\n      transform: rotateY(-180deg);\n      background-image: ${({ image }) => `url(${image})`};\n    }\n  }\n  p {\n    margin: 0;\n  }\n`;\n",
    "import React from 'react';\nimport { number, func, object } from 'prop-types';\nimport { CardWrap } from './styled.Card';\nimport { isValueInArray2 } from '../../helpers';\n\nexport default function Card({ index, width, сlick, state, image }) {\n  const isActive = isValueInArray2(state.pairs, index);\n  const isSame = state.previousValue === index;\n  return (\n    <CardWrap\n      className={(isSame || isActive) && 'active'}\n      width={width}\n      onClick={() => сlick(index)}\n      image={image?.webformatURL}\n    >\n      {/* <p>Card {index}</p> */}\n      {/* <p>{isSame && 'Clicked'}</p>\n      <p>{isActive && 'Active'}</p> */}\n    </CardWrap>\n  );\n}\n\nCard.propTypes = {\n  index: number.isRequired,\n  width: number.isRequired,\n  сlick: func.isRequired,\n  state: object.isRequired,\n  image: object.isRequired,\n};\n",
    "import React, { useState, useCallback, useEffect } from 'react';\nimport { object, array, number, func } from 'prop-types';\nimport { SIZES_LIST } from '../../helpers/lists';\nimport { concatArray, getPair, setStateValue, isValueInArray } from '../../helpers';\nimport Card from '../Card';\n\nconst BattleCards = ({ initialValues, pairs, shuffledArray, size, setFinish }) => {\n  const [isStart, setIsStart] = useState(true);\n  const [state, setState] = useState(initialValues);\n\n  useEffect(() => {\n    if (isStart) {\n      const setPairs = concatArray(pairs).map((item) => item.id);\n      setState((prev) => setStateValue(prev, 'pairs', setPairs));\n      const clearTimeoutRef = setTimeout(() => {\n        setState((prev) => setStateValue(prev, 'pairs', []));\n        setIsStart(false);\n      }, 5000);\n\n      return () => {\n        clearTimeout(clearTimeoutRef);\n      };\n    }\n  }, [isStart, pairs]);\n\n  useEffect(() => {\n    if (state.pairs.length === size * 2 && !isStart) {\n      setFinish(true);\n    }\n  }, [state, size, setFinish, isStart]);\n\n  const cardClickHandler = useCallback(\n    (id) => {\n      const pair = getPair(id, pairs);\n      if (state.previousValue) {\n        setState((prev) => setStateValue(prev, 'previousValue', null));\n        if (isValueInArray(pair, state.previousValue)) {\n          setState((prev) => setStateValue(prev, 'pairs', [...prev.pairs, state.previousValue, id]));\n        }\n      } else {\n        setState((prev) => {\n          return { ...prev, previousValue: id, same: pair };\n        });\n      }\n    },\n    [pairs, state]\n  );\n\n  return shuffledArray.map(({ id, image = {} }) => (\n    <Card state={state} сlick={cardClickHandler} key={id} index={id} width={SIZES_LIST[size]} image={image} />\n  ));\n};\n\nBattleCards.propTypes = {\n  initialValues: object.isRequired,\n  shuffledArray: array.isRequired,\n  size: number.isRequired,\n  setFinish: func.isRequired,\n};\n\nexport default BattleCards;\n",
    "import React, { useState } from 'react';\nimport { number, object } from 'prop-types';\nimport { BattleFieldWrap } from './styled.BattleField';\nimport BattleCards from './BattleCards';\n\nconst initialValues = {\n  same: [],\n  previousValue: null,\n  pairs: [],\n};\n\nconst BattleWrap = ({ size, images }) => {\n  const [finish, setFinish] = useState(false);\n\n  return (\n    <>\n      <BattleFieldWrap>\n        {images && <BattleCards initialValues={initialValues} setFinish={setFinish} size={size} {...images} />}\n        {finish && <p>Finish!</p>}\n      </BattleFieldWrap>\n    </>\n  );\n};\n\nBattleWrap.propTypes = {\n  size: number.isRequired,\n  images: object.isRequired,\n};\n\nexport default BattleWrap;\n",
    "import React from 'react';\nimport styled from 'styled-components';\nimport { func, number } from 'prop-types';\nimport { SIZES_LIST } from '../../helpers/lists';\n\nconst NavWrap = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  p {\n    margin-right: 10px;\n  }\n`;\n\nconst NavBar = ({ size, setSize }) => {\n  return (\n    <NavWrap>\n      <p>Choice pairs size: </p>\n      <select value={size} onChange={(e) => setSize(Number(e.target.value))}>\n        {Object.keys(SIZES_LIST).map((item) => (\n          <option key={`NavBar-${item}`} value={item}>\n            {item} pairs\n          </option>\n        ))}\n      </select>\n    </NavWrap>\n  );\n};\n\nNavBar.propTypes = {\n  size: number.isRequired,\n  setSize: func.isRequired,\n};\n\nexport default NavBar;\n",
    "import React, { useState } from 'react';\nimport { useFetch } from '../../hooks/imageHooks';\nimport BattleWrap from '../../components/BattleField';\nimport { generateCardsData } from '../../helpers';\nimport NavBar from '../../components/NavBar';\n\nconst BattleField = () => {\n  const [size, setSize] = useState(6);\n  const { loading, data } = useFetch(\n    `https://pixabay.com/api/?key=15966127-0de5e2f734fe4c748678e72b0&q=peoples&image_type=photo&per_page=${\n      size < 3 ? 3 : size\n    }`,\n    null\n  );\n  const cardData = !loading && data && generateCardsData(size * 2, data?.hits);\n  const content = !loading && data ? <BattleWrap size={size} images={cardData} /> : <p>loading</p>;\n  return (\n    <>\n      <NavBar size={size} setSize={setSize} />\n      {content}\n    </>\n  );\n};\n\nexport default BattleField;\n",
    "import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const useFetch = (url, initialValue) => {\n  const [data, setData] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(url);\n        if (response.status === 200) {\n          setData(response.data);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return { loading, data };\n};\n",
    "import React from 'react';\r\nimport { ContentContainer } from '../../components/globalStyle';\r\nimport BattleField from '../BattleField';\r\n\r\nfunction App() {\r\n  return (\r\n    <ContentContainer>\r\n      <BattleField />\r\n    </ContentContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './container/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
